# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F5nrHkwsILWRU_jfw2JUWppm6clb_wi1
"""

# PREDICT THE PERCENTAGE OF A STUDENT BASED ON THE NUMBER OF STUDY HOURS.

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt 
# %matplotlib inline 
print("Libraries Imported Successfully")

#Loading The Data Set
url ="http://bit.ly/w-data"
data = pd.read_csv(url)
print("Data set read succesfully")

# first five rows of the data frame 
data.head()

# oncise summary of data frames 
data.info()

# descriptive Statistics of data
data.describe()

# checking correlation 
data.corr(method='pearson')

# Checking for null values
data.isnull().sum()

# plotting the distribution of scores 
data.plot(x='Hours',y='Scores',style='o')
plt.title('Hours Vs Percentage',fontsize=16)
plt.xlabel('Hours Studied',fontsize=12)
plt.ylabel('percentage score',fontsize=12)
plt.show()

X=data.iloc[:,:-1].values 
y=data.iloc[:,1].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)

# Linear Regression 
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,y_train)

line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X,y)
plt.title('Hour vs Percentage',fontsize=16)
plt.xlabel('Hour Studied',fontsize=12)
plt.ylabel('Percentage score',fontsize=12)
plt.plot(X,line);
plt.show()

# test data
print(X_test)

# Comparing Actual vs Predicted 
y_pred = regressor.predict(X_test)
y_pred = regressor.predict(X_test)
df = pd.DataFrame({'Actual Score': y_test,'Predicted_Score': y_pred})
df

from sklearn import metrics 
from sklearn.metrics import r2_score
print('Mean Absolute Error : ',metrics.mean_absolute_error(y_test,y_pred))
print('R2 score :',r2_score(y_test,y_pred))

hours = 9.25
own_pred = regressor.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))